# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:31:29+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query
from pydantic import conint, constr

from models import (
    AccessDeniedException,
    ConflictException,
    CreateDatasetResponse,
    CreateModelResponse,
    CreateProjectResponse,
    DeleteDatasetResponse,
    DeleteModelResponse,
    DeleteProjectResponse,
    DescribeDatasetResponse,
    DescribeModelPackagingJobResponse,
    DescribeModelResponse,
    DescribeProjectResponse,
    DetectAnomaliesResponse,
    Field20201120ProjectsPostRequest,
    Field20201120ProjectsProjectNameDatasetsDatasetTypeEntriesPatchRequest,
    Field20201120ProjectsProjectNameDatasetsPostRequest,
    Field20201120ProjectsProjectNameModelpackagingjobsPostRequest,
    Field20201120ProjectsProjectNameModelsModelVersionDetectContentTypePostRequest,
    Field20201120ProjectsProjectNameModelsModelVersionStartPostRequest,
    Field20201120ProjectsProjectNameModelsPostRequest,
    Field20201120TagsResourceArnPostRequest,
    InternalServerException,
    ListDatasetEntriesResponse,
    ListModelPackagingJobsResponse,
    ListModelsResponse,
    ListProjectsResponse,
    ListTagsForResourceResponse,
    ResourceNotFoundException,
    ServiceQuotaExceededException,
    StartModelPackagingJobResponse,
    StartModelResponse,
    StopModelResponse,
    TagKeys,
    TagResourceResponse,
    ThrottlingException,
    UntagResourceResponse,
    UpdateDatasetEntriesResponse,
    ValidationException,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='<p>This is the Amazon Lookout for Vision API Reference. It provides descriptions of actions, data types, common parameters, and common errors.</p> <p>Amazon Lookout for Vision enables you to find visual defects in industrial products, accurately and at scale. It uses computer vision to identify missing components in an industrial product, damage to vehicles or structures, irregularities in production lines, and even minuscule defects in silicon wafers â€” or any other physical item where quality is important such as a missing capacitor on printed circuit boards.</p>',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='Amazon Lookout for Vision',
    version='2020-11-20',
    servers=[
        {
            'description': 'The Amazon Lookout for Vision multi-region endpoint',
            'url': 'http://lookoutvision.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon Lookout for Vision multi-region endpoint',
            'url': 'https://lookoutvision.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon Lookout for Vision endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://lookoutvision.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The Amazon Lookout for Vision endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://lookoutvision.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/2020-11-20/projects',
    description=""" <p>Lists the Amazon Lookout for Vision projects in your AWS account that are in the AWS Region in which you call <code>ListProjects</code>.</p> <p>The <code>ListProjects</code> operation is eventually consistent. Recent calls to <code>CreateProject</code> and <code>DeleteProject</code> might take a while to appear in the response from <code>ListProjects</code>.</p> <p>This operation requires permissions to perform the <code>lookoutvision:ListProjects</code> operation.</p> """,
    tags=['dataset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_projects(
    next_token: Union[
        Optional[constr(pattern=r'^[a-zA-Z0-9\/\+\=]{0,2048}$', max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/2020-11-20/projects',
    description=""" <p>Creates an empty Amazon Lookout for Vision project. After you create the project, add a dataset by calling <a>CreateDataset</a>.</p> <p>This operation requires permissions to perform the <code>lookoutvision:CreateProject</code> operation.</p> """,
    tags=['project_management', 'dataset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_project(
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Field20201120ProjectsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/2020-11-20/projects/{projectName}',
    description=""" <p>Deletes an Amazon Lookout for Vision project.</p> <p>To delete a project, you must first delete each version of the model associated with the project. To delete a model use the <a>DeleteModel</a> operation.</p> <p>You also have to delete the dataset(s) associated with the model. For more information, see <a>DeleteDataset</a>. The images referenced by the training and test datasets aren't deleted. </p> <p>This operation requires permissions to perform the <code>lookoutvision:DeleteProject</code> operation.</p> """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_project(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/2020-11-20/projects/{projectName}',
    description=""" <p>Describes an Amazon Lookout for Vision project.</p> <p>This operation requires permissions to perform the <code>lookoutvision:DescribeProject</code> operation.</p> """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_project(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/2020-11-20/projects/{projectName}/datasets',
    description=""" <p>Creates a new dataset in an Amazon Lookout for Vision project. <code>CreateDataset</code> can create a training or a test dataset from a valid dataset source (<code>DatasetSource</code>).</p> <p>If you want a single dataset project, specify <code>train</code> for the value of <code>DatasetType</code>.</p> <p>To have a project with separate training and test datasets, call <code>CreateDataset</code> twice. On the first call, specify <code>train</code> for the value of <code>DatasetType</code>. On the second call, specify <code>test</code> for the value of <code>DatasetType</code>. </p> <p>This operation requires permissions to perform the <code>lookoutvision:CreateDataset</code> operation.</p> """,
    tags=['project_management', 'dataset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_dataset(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Field20201120ProjectsProjectNameDatasetsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/2020-11-20/projects/{projectName}/datasets/{datasetType}',
    description=""" <p>Deletes an existing Amazon Lookout for Vision <code>dataset</code>. </p> <p>If your the project has a single dataset, you must create a new dataset before you can create a model.</p> <p>If you project has a training dataset and a test dataset consider the following. </p> <ul> <li> <p>If you delete the test dataset, your project reverts to a single dataset project. If you then train the model, Amazon Lookout for Vision internally splits the remaining dataset into a training and test dataset.</p> </li> <li> <p>If you delete the training dataset, you must create a training dataset before you can create a model.</p> </li> </ul> <p>This operation requires permissions to perform the <code>lookoutvision:DeleteDataset</code> operation.</p> """,
    tags=['project_management', 'dataset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_dataset(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    dataset_type: constr(pattern=r'train|test', min_length=1, max_length=10) = Path(
        ..., alias='datasetType'
    ),
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/2020-11-20/projects/{projectName}/datasets/{datasetType}',
    description=""" <p>Describe an Amazon Lookout for Vision dataset.</p> <p>This operation requires permissions to perform the <code>lookoutvision:DescribeDataset</code> operation.</p> """,
    tags=['project_management', 'dataset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_dataset(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    dataset_type: constr(pattern=r'train|test', min_length=1, max_length=10) = Path(
        ..., alias='datasetType'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/2020-11-20/projects/{projectName}/datasets/{datasetType}/entries',
    description=""" <p>Lists the JSON Lines within a dataset. An Amazon Lookout for Vision JSON Line contains the anomaly information for a single image, including the image location and the assigned label.</p> <p>This operation requires permissions to perform the <code>lookoutvision:ListDatasetEntries</code> operation.</p> """,
    tags=['project_management', 'dataset_handling', 'anomaly_detection_processes'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_dataset_entries(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    dataset_type: constr(pattern=r'train|test', min_length=1, max_length=10) = Path(
        ..., alias='datasetType'
    ),
    labeled: Optional[bool] = None,
    anomaly_class: Optional[
        constr(pattern=r'(normal|anomaly)', min_length=1, max_length=10)
    ] = Query(None, alias='anomalyClass'),
    created_before: Optional[datetime] = Query(None, alias='createdBefore'),
    created_after: Optional[datetime] = Query(None, alias='createdAfter'),
    next_token: Union[
        Optional[constr(pattern=r'^[a-zA-Z0-9\/\+\=]{0,2048}$', max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    source_ref_contains: Optional[
        constr(pattern=r'.*\S.*', min_length=1, max_length=2048)
    ] = Query(None, alias='sourceRefContains'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/2020-11-20/projects/{projectName}/datasets/{datasetType}/entries',
    description=""" <p>Adds or updates one or more JSON Line entries in a dataset. A JSON Line includes information about an image used for training or testing an Amazon Lookout for Vision model.</p> <p>To update an existing JSON Line, use the <code>source-ref</code> field to identify the JSON Line. The JSON line that you supply replaces the existing JSON line. Any existing annotations that are not in the new JSON line are removed from the dataset. </p> <p>For more information, see <i>Defining JSON lines for anomaly classification</i> in the Amazon Lookout for Vision Developer Guide. </p> <note> <p>The images you reference in the <code>source-ref</code> field of a JSON line, must be in the same S3 bucket as the existing images in the dataset. </p> </note> <p>Updating a dataset might take a while to complete. To check the current status, call <a>DescribeDataset</a> and check the <code>Status</code> field in the response.</p> <p>This operation requires permissions to perform the <code>lookoutvision:UpdateDatasetEntries</code> operation.</p> """,
    tags=['project_management', 'dataset_handling'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_dataset_entries(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    dataset_type: constr(pattern=r'train|test', min_length=1, max_length=10) = Path(
        ..., alias='datasetType'
    ),
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Field20201120ProjectsProjectNameDatasetsDatasetTypeEntriesPatchRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/2020-11-20/projects/{projectName}/modelpackagingjobs',
    description=""" <p> Lists the model packaging jobs created for an Amazon Lookout for Vision project. </p> <p>This operation requires permissions to perform the <code>lookoutvision:ListModelPackagingJobs</code> operation. </p> <p>For more information, see <i>Using your Amazon Lookout for Vision model on an edge device</i> in the Amazon Lookout for Vision Developer Guide. </p> """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_model_packaging_jobs(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    next_token: Union[
        Optional[constr(pattern=r'^[a-zA-Z0-9\/\+\=]{0,2048}$', max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/2020-11-20/projects/{projectName}/modelpackagingjobs',
    description=""" <p>Starts an Amazon Lookout for Vision model packaging job. A model packaging job creates an AWS IoT Greengrass component for a Lookout for Vision model. You can use the component to deploy your model to an edge device managed by Greengrass. </p> <p>Use the <a>DescribeModelPackagingJob</a> API to determine the current status of the job. The model packaging job is complete if the value of <code>Status</code> is <code>SUCCEEDED</code>.</p> <p>To deploy the component to the target device, use the component name and component version with the AWS IoT Greengrass <a href="https://docs.aws.amazon.com/greengrass/v2/APIReference/API_CreateDeployment.html">CreateDeployment</a> API.</p> <p>This operation requires the following permissions:</p> <ul> <li> <p> <code>lookoutvision:StartModelPackagingJob</code> </p> </li> <li> <p> <code>s3:PutObject</code> </p> </li> <li> <p> <code>s3:GetBucketLocation</code> </p> </li> <li> <p> <code>kms:GenerateDataKey</code> </p> </li> <li> <p> <code>greengrass:CreateComponentVersion</code> </p> </li> <li> <p> <code>greengrass:DescribeComponent</code> </p> </li> <li> <p>(Optional) <code>greengrass:TagResource</code>. Only required if you want to tag the component.</p> </li> </ul> <p>For more information, see <i>Using your Amazon Lookout for Vision model on an edge device</i> in the Amazon Lookout for Vision Developer Guide. </p> """,
    tags=['model_packaging_workflows'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_model_packaging_job(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Field20201120ProjectsProjectNameModelpackagingjobsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/2020-11-20/projects/{projectName}/modelpackagingjobs/{jobName}',
    description=""" <p>Describes an Amazon Lookout for Vision model packaging job. </p> <p>This operation requires permissions to perform the <code>lookoutvision:DescribeModelPackagingJob</code> operation.</p> <p>For more information, see <i>Using your Amazon Lookout for Vision model on an edge device</i> in the Amazon Lookout for Vision Developer Guide. </p> """,
    tags=['project_management', 'model_packaging_workflows'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_model_packaging_job(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    job_name: constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=64) = Path(
        ..., alias='jobName'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/2020-11-20/projects/{projectName}/models',
    description=""" <p>Lists the versions of a model in an Amazon Lookout for Vision project.</p> <p>The <code>ListModels</code> operation is eventually consistent. Recent calls to <code>CreateModel</code> might take a while to appear in the response from <code>ListProjects</code>.</p> <p>This operation requires permissions to perform the <code>lookoutvision:ListModels</code> operation.</p> """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_models(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    next_token: Union[
        Optional[constr(pattern=r'^[a-zA-Z0-9\/\+\=]{0,2048}$', max_length=2048)],
        Optional[str],
        Optional[str],
        Optional[str],
    ] = Query(None, alias='nextToken'),
    max_results: Union[
        Optional[conint(ge=1, le=100)], Optional[str], Optional[str], Optional[str]
    ] = Query(None, alias='maxResults'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/2020-11-20/projects/{projectName}/models',
    description=""" <p>Creates a new version of a model within an an Amazon Lookout for Vision project. <code>CreateModel</code> is an asynchronous operation in which Amazon Lookout for Vision trains, tests, and evaluates a new version of a model. </p> <p>To get the current status, check the <code>Status</code> field returned in the response from <a>DescribeModel</a>.</p> <p>If the project has a single dataset, Amazon Lookout for Vision internally splits the dataset to create a training and a test dataset. If the project has a training and a test dataset, Lookout for Vision uses the respective datasets to train and test the model. </p> <p>After training completes, the evaluation metrics are stored at the location specified in <code>OutputConfig</code>. </p> <p>This operation requires permissions to perform the <code>lookoutvision:CreateModel</code> operation. If you want to tag your model, you also require permission to the <code>lookoutvision:TagResource</code> operation.</p> """,
    tags=['project_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_model(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Field20201120ProjectsProjectNameModelsPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/2020-11-20/projects/{projectName}/models/{modelVersion}',
    description=""" <p>Deletes an Amazon Lookout for Vision model. You can't delete a running model. To stop a running model, use the <a>StopModel</a> operation.</p> <p>It might take a few seconds to delete a model. To determine if a model has been deleted, call <a>ListModels</a> and check if the version of the model (<code>ModelVersion</code>) is in the <code>Models</code> array. </p> <p/> <p>This operation requires permissions to perform the <code>lookoutvision:DeleteModel</code> operation.</p> """,
    tags=['model_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_model(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    model_version: constr(pattern=r'([1-9][0-9]*)', min_length=1, max_length=10) = Path(
        ..., alias='modelVersion'
    ),
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/2020-11-20/projects/{projectName}/models/{modelVersion}',
    description=""" <p>Describes a version of an Amazon Lookout for Vision model.</p> <p>This operation requires permissions to perform the <code>lookoutvision:DescribeModel</code> operation.</p> """,
    tags=['project_management', 'model_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def describe_model(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    model_version: constr(
        pattern=r'([1-9][0-9]*|latest)', min_length=1, max_length=10
    ) = Path(..., alias='modelVersion'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/2020-11-20/projects/{projectName}/models/{modelVersion}/detect#Content-Type',
    description=""" <p>Detects anomalies in an image that you supply. </p> <p>The response from <code>DetectAnomalies</code> includes a boolean prediction that the image contains one or more anomalies and a confidence value for the prediction. If the model is an image segmentation model, the response also includes segmentation information for each type of anomaly found in the image.</p> <note> <p>Before calling <code>DetectAnomalies</code>, you must first start your model with the <a>StartModel</a> operation. You are charged for the amount of time, in minutes, that a model runs and for the number of anomaly detection units that your model uses. If you are not using a model, use the <a>StopModel</a> operation to stop your model. </p> </note> <p>For more information, see <i>Detecting anomalies in an image</i> in the Amazon Lookout for Vision developer guide.</p> <p>This operation requires permissions to perform the <code>lookoutvision:DetectAnomalies</code> operation.</p> """,
    tags=['model_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def detect_anomalies(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    model_version: constr(
        pattern=r'([1-9][0-9]*|latest)', min_length=1, max_length=10
    ) = Path(..., alias='modelVersion'),
    content__type: constr(pattern=r'.*', min_length=1, max_length=255) = Header(
        ..., alias='Content-Type'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Field20201120ProjectsProjectNameModelsModelVersionDetectContentTypePostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/2020-11-20/projects/{projectName}/models/{modelVersion}/start',
    description=""" <p>Starts the running of the version of an Amazon Lookout for Vision model. Starting a model takes a while to complete. To check the current state of the model, use <a>DescribeModel</a>.</p> <p>A model is ready to use when its status is <code>HOSTED</code>.</p> <p>Once the model is running, you can detect custom labels in new images by calling <a>DetectAnomalies</a>.</p> <note> <p>You are charged for the amount of time that the model is running. To stop a running model, call <a>StopModel</a>.</p> </note> <p>This operation requires permissions to perform the <code>lookoutvision:StartModel</code> operation.</p> """,
    tags=['project_management', 'model_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def start_model(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    model_version: constr(
        pattern=r'([1-9][0-9]*|latest)', min_length=1, max_length=10
    ) = Path(..., alias='modelVersion'),
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Field20201120ProjectsProjectNameModelsModelVersionStartPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/2020-11-20/projects/{projectName}/models/{modelVersion}/stop',
    description=""" <p>Stops the hosting of a running model. The operation might take a while to complete. To check the current status, call <a>DescribeModel</a>. </p> <p>After the model hosting stops, the <code>Status</code> of the model is <code>TRAINED</code>.</p> <p>This operation requires permissions to perform the <code>lookoutvision:StopModel</code> operation.</p> """,
    tags=['model_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def stop_model(
    project_name: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Path(..., alias='projectName'),
    model_version: constr(
        pattern=r'([1-9][0-9]*|latest)', min_length=1, max_length=10
    ) = Path(..., alias='modelVersion'),
    x__amzn__client__token: Optional[
        constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)
    ] = Header(None, alias='X-Amzn-Client-Token'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/2020-11-20/tags/{resourceArn}',
    description=""" <p>Returns a list of tags attached to the specified Amazon Lookout for Vision model.</p> <p>This operation requires permissions to perform the <code>lookoutvision:ListTagsForResource</code> operation.</p> """,
    tags=['resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_tags_for_resource(
    resource_arn: constr(min_length=1, max_length=1011) = Path(
        ..., alias='resourceArn'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/2020-11-20/tags/{resourceArn}',
    description=""" <p>Adds one or more key-value tags to an Amazon Lookout for Vision model. For more information, see <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p> <p>This operation requires permissions to perform the <code>lookoutvision:TagResource</code> operation.</p> """,
    tags=['resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def tag_resource(
    resource_arn: constr(min_length=1, max_length=1011) = Path(
        ..., alias='resourceArn'
    ),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
    body: Field20201120TagsResourceArnPostRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/2020-11-20/tags/{resourceArn}#tagKeys',
    description=""" <p>Removes one or more tags from an Amazon Lookout for Vision model. For more information, see <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p> <p>This operation requires permissions to perform the <code>lookoutvision:UntagResource</code> operation.</p> """,
    tags=['resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def untag_resource(
    resource_arn: constr(min_length=1, max_length=1011) = Path(
        ..., alias='resourceArn'
    ),
    tag_keys: TagKeys = Query(..., alias='tagKeys'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
