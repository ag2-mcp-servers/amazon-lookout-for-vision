# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:31:29+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AnomalyClassFilter(
    RootModel[constr(pattern=r'(normal|anomaly)', min_length=1, max_length=10)]
):
    root: constr(pattern=r'(normal|anomaly)', min_length=1, max_length=10)


class AnomalyMask(RootModel[constr(min_length=1, max_length=5242880)]):
    root: constr(min_length=1, max_length=5242880)


class AnomalyName(
    RootModel[constr(pattern=r'[a-zA-Z0-9]*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9]*', min_length=1, max_length=256)


class Boolean(RootModel[bool]):
    root: bool


class ClientToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)


class Color(RootModel[constr(pattern=r'\#[a-zA-Z0-9]{6}', min_length=7, max_length=7)]):
    root: constr(pattern=r'\#[a-zA-Z0-9]{6}', min_length=7, max_length=7)


class CompilerOptions(RootModel[constr(pattern=r'.*', min_length=3, max_length=1024)]):
    root: constr(pattern=r'.*', min_length=3, max_length=1024)


class ComponentDescription(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_. ()\':,;?]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9-_. ()\':,;?]+', min_length=1, max_length=256)


class ComponentName(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_.]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9-_.]+', min_length=1, max_length=128)


class ComponentVersion(
    RootModel[
        constr(
            pattern=r'^([0-9]{1,6})\.([0-9]{1,6})\.([0-9]{1,6})$',
            min_length=1,
            max_length=64,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9]{1,6})\.([0-9]{1,6})\.([0-9]{1,6})$',
        min_length=1,
        max_length=64,
    )


class ComponentVersionArn(
    RootModel[constr(pattern=r'arn:[^:]*:greengrass:[^:]*:aws:components:[^:]+')]
):
    root: constr(pattern=r'arn:[^:]*:greengrass:[^:]*:aws:components:[^:]+')


class ConflictException(RootModel[Any]):
    root: Any


class ContentType(RootModel[constr(pattern=r'.*', min_length=1, max_length=255)]):
    root: constr(pattern=r'.*', min_length=1, max_length=255)


class DatasetChanges(RootModel[constr(min_length=1, max_length=10485760)]):
    root: constr(min_length=1, max_length=10485760)


class DatasetEntry(
    RootModel[constr(pattern=r'^\{.*\}$', min_length=2, max_length=8192)]
):
    root: constr(pattern=r'^\{.*\}$', min_length=2, max_length=8192)


class DatasetEntryList(RootModel[List[DatasetEntry]]):
    root: List[DatasetEntry]


class DatasetStatus(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_COMPLETE = 'CREATE_COMPLETE'
    CREATE_FAILED = 'CREATE_FAILED'
    UPDATE_IN_PROGRESS = 'UPDATE_IN_PROGRESS'
    UPDATE_COMPLETE = 'UPDATE_COMPLETE'
    UPDATE_FAILED_ROLLBACK_IN_PROGRESS = 'UPDATE_FAILED_ROLLBACK_IN_PROGRESS'
    UPDATE_FAILED_ROLLBACK_COMPLETE = 'UPDATE_FAILED_ROLLBACK_COMPLETE'
    DELETE_IN_PROGRESS = 'DELETE_IN_PROGRESS'
    DELETE_COMPLETE = 'DELETE_COMPLETE'
    DELETE_FAILED = 'DELETE_FAILED'


class DatasetStatusMessage(RootModel[str]):
    root: str


class DatasetType(
    RootModel[constr(pattern=r'train|test', min_length=1, max_length=10)]
):
    root: constr(pattern=r'train|test', min_length=1, max_length=10)


class DateTime(RootModel[datetime]):
    root: datetime


class DeleteDatasetRequest(BaseModel):
    pass


class DeleteDatasetResponse(BaseModel):
    pass


class DeleteModelRequest(BaseModel):
    pass


class DeleteProjectRequest(BaseModel):
    pass


class DescribeDatasetRequest(BaseModel):
    pass


class DescribeModelPackagingJobRequest(BaseModel):
    pass


class DescribeModelRequest(BaseModel):
    pass


class DescribeProjectRequest(BaseModel):
    pass


class Float(RootModel[float]):
    root: float


class GreengrassOutputDetails(BaseModel):
    ComponentName_1: Optional[ComponentName] = Field(None, alias='ComponentName')
    ComponentVersion_1: Optional[ComponentVersion] = Field(
        None, alias='ComponentVersion'
    )
    ComponentVersionArn_1: Optional[ComponentVersionArn] = Field(
        None, alias='ComponentVersionArn'
    )


class ImageSourceType(RootModel[constr(pattern=r'direct')]):
    root: constr(pattern=r'direct')


class InferenceUnits(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class IsLabeled(RootModel[bool]):
    root: bool


class KmsKeyId(
    RootModel[
        constr(
            pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
        min_length=1,
        max_length=2048,
    )


class ListDatasetEntriesRequest(BaseModel):
    pass


class ListModelPackagingJobsRequest(BaseModel):
    pass


class ListModelsRequest(BaseModel):
    pass


class ListProjectsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class ModelArn(RootModel[str]):
    root: str


class ModelDescriptionMessage(
    RootModel[constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=1, max_length=500)]
):
    root: constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=1, max_length=500)


class ModelHostingStatus(Enum):
    STARTING_HOSTING = 'STARTING_HOSTING'
    HOSTED = 'HOSTED'
    HOSTING_FAILED = 'HOSTING_FAILED'
    STOPPING_HOSTING = 'STOPPING_HOSTING'
    SYSTEM_UPDATING = 'SYSTEM_UPDATING'


class ModelPackagingJobDescription(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_. ()\':,;?]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9-_. ()\':,;?]+', min_length=1, max_length=256)


class ModelPackagingJobName(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=64)


class ModelPackagingJobStatus(Enum):
    CREATED = 'CREATED'
    RUNNING = 'RUNNING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class ModelPackagingMethod(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]+', min_length=1, max_length=32)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]+', min_length=1, max_length=32)


class ModelPackagingOutputDetails(BaseModel):
    Greengrass: Optional[GreengrassOutputDetails] = None


class ModelPackagingStatusMessage(RootModel[str]):
    root: str


class ModelPerformance(BaseModel):
    F1Score: Optional[Float] = None
    Precision: Optional[Float] = None
    Recall: Optional[Float] = None


class ModelStatus(Enum):
    TRAINING = 'TRAINING'
    TRAINED = 'TRAINED'
    TRAINING_FAILED = 'TRAINING_FAILED'
    STARTING_HOSTING = 'STARTING_HOSTING'
    HOSTED = 'HOSTED'
    HOSTING_FAILED = 'HOSTING_FAILED'
    STOPPING_HOSTING = 'STOPPING_HOSTING'
    SYSTEM_UPDATING = 'SYSTEM_UPDATING'
    DELETING = 'DELETING'


class ModelStatusMessage(RootModel[str]):
    root: str


class ModelVersion(
    RootModel[constr(pattern=r'([1-9][0-9]*|latest)', min_length=1, max_length=10)]
):
    root: constr(pattern=r'([1-9][0-9]*|latest)', min_length=1, max_length=10)


class ModelVersionNoLatest(
    RootModel[constr(pattern=r'([1-9][0-9]*)', min_length=1, max_length=10)]
):
    root: constr(pattern=r'([1-9][0-9]*)', min_length=1, max_length=10)


class PageSize(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class PaginationToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9\/\+\=]{0,2048}$', max_length=2048)]
):
    root: constr(pattern=r'^[a-zA-Z0-9\/\+\=]{0,2048}$', max_length=2048)


class PixelAnomaly(BaseModel):
    Color_1: Optional[Color] = Field(None, alias='Color')
    TotalPercentageArea: Optional[Float] = None


class ProjectArn(RootModel[str]):
    root: str


class ProjectName(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255)


class QueryString(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=2048)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=2048)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class S3BucketName(
    RootModel[constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=3, max_length=63)]
):
    root: constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=3, max_length=63)


class S3KeyPrefix(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9!_.*\'()-][/a-zA-Z0-9!_.*\'()-]*)?$', max_length=1024
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9!_.*\'()-][/a-zA-Z0-9!_.*\'()-]*)?$', max_length=1024
    )


class S3Location(BaseModel):
    Bucket: S3BucketName
    Prefix: Optional[S3KeyPrefix] = None


class S3ObjectKey(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9!_.*\'()-][/a-zA-Z0-9!_.*\'()-]*)?$',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9!_.*\'()-][/a-zA-Z0-9!_.*\'()-]*)?$',
        min_length=1,
        max_length=1024,
    )


class S3ObjectVersion(RootModel[constr(pattern=r'.*', min_length=1, max_length=1024)]):
    root: constr(pattern=r'.*', min_length=1, max_length=1024)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class StartModelPackagingJobResponse(BaseModel):
    JobName: Optional[ModelPackagingJobName] = None


class StartModelRequest(BaseModel):
    MaxInferenceUnits: Optional[InferenceUnits] = None
    MinInferenceUnits: InferenceUnits


class StartModelResponse(BaseModel):
    Status: Optional[ModelHostingStatus] = None


class StopModelRequest(BaseModel):
    pass


class StopModelResponse(BaseModel):
    Status: Optional[ModelHostingStatus] = None


class Stream(RootModel[str]):
    root: str


class TagArn(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TargetDevice(Enum):
    jetson_xavier = 'jetson_xavier'


class TargetPlatformAccelerator(Enum):
    NVIDIA = 'NVIDIA'


class TargetPlatformArch(Enum):
    ARM64 = 'ARM64'
    X86_64 = 'X86_64'


class TargetPlatformOs(Enum):
    LINUX = 'LINUX'


class ThrottlingException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateDatasetEntriesRequest(BaseModel):
    Changes: DatasetChanges


class UpdateDatasetEntriesResponse(BaseModel):
    Status: Optional[DatasetStatus] = None


class ValidationException(RootModel[Any]):
    root: Any


class Field20201120ProjectsPostRequest(BaseModel):
    ProjectName: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9_\-]*', min_length=1, max_length=255
    ) = Field(..., description='The name for the project.')


class Field20201120ProjectsProjectNameDatasetsDatasetTypeEntriesPatchRequest(BaseModel):
    Changes: constr(min_length=1, max_length=10485760) = Field(
        ..., description='The entries to add to the dataset.'
    )


class OutputConfig1(BaseModel):
    S3Location_1: Optional[S3Location] = Field(None, alias='S3Location')


class Field20201120ProjectsProjectNameModelsModelVersionDetectContentTypePostRequest(
    BaseModel
):
    Body: str = Field(
        ..., description='The unencrypted image bytes that you want to analyze. '
    )


class Field20201120ProjectsProjectNameModelsModelVersionStartPostRequest(BaseModel):
    MaxInferenceUnits: Optional[conint(ge=1)] = Field(
        None,
        description="The maximum number of inference units to use for auto-scaling the model. If you don't specify a value, Amazon Lookout for Vision doesn't auto-scale the model.",
    )
    MinInferenceUnits: conint(ge=1) = Field(
        ...,
        description='The minimum number of inference units to use. A single inference unit represents 1 hour of processing. Use a higher number to increase the TPS throughput of your model. You are charged for the number of inference units that you use. ',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class Anomaly(BaseModel):
    Name: Optional[AnomalyName] = None
    PixelAnomaly_1: Optional[PixelAnomaly] = Field(None, alias='PixelAnomaly')


class AnomalyList(RootModel[List[Anomaly]]):
    root: List[Anomaly]


class CreateProjectRequest(BaseModel):
    ProjectName_1: ProjectName = Field(..., alias='ProjectName')


class DatasetImageStats(BaseModel):
    Anomaly: Optional[Integer] = None
    Labeled: Optional[Integer] = None
    Normal: Optional[Integer] = None
    Total: Optional[Integer] = None


class DatasetMetadata(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    DatasetType_1: Optional[DatasetType] = Field(None, alias='DatasetType')
    Status: Optional[DatasetStatus] = None
    StatusMessage: Optional[DatasetStatusMessage] = None


class DatasetMetadataList(RootModel[List[DatasetMetadata]]):
    root: List[DatasetMetadata]


class DeleteModelResponse(BaseModel):
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')


class DeleteProjectResponse(BaseModel):
    ProjectArn_1: Optional[ProjectArn] = Field(None, alias='ProjectArn')


class DetectAnomaliesRequest(BaseModel):
    Body: Stream


class ImageSource(BaseModel):
    Type: Optional[ImageSourceType] = None


class InputS3Object(BaseModel):
    Bucket: S3BucketName
    Key: S3ObjectKey
    VersionId: Optional[S3ObjectVersion] = None


class ListDatasetEntriesResponse(BaseModel):
    DatasetEntries: Optional[DatasetEntryList] = None
    NextToken: Optional[PaginationToken] = None


class ModelMetadata(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    Description: Optional[ModelDescriptionMessage] = None
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelVersion_1: Optional[ModelVersion] = Field(None, alias='ModelVersion')
    Performance: Optional[ModelPerformance] = None
    Status: Optional[ModelStatus] = None
    StatusMessage: Optional[ModelStatusMessage] = None


class ModelMetadataList(RootModel[List[ModelMetadata]]):
    root: List[ModelMetadata]


class ModelPackagingJobMetadata(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    JobName: Optional[ModelPackagingJobName] = None
    LastUpdatedTimestamp: Optional[DateTime] = None
    ModelPackagingJobDescription_1: Optional[ModelPackagingJobDescription] = Field(
        None, alias='ModelPackagingJobDescription'
    )
    ModelPackagingMethod_1: Optional[ModelPackagingMethod] = Field(
        None, alias='ModelPackagingMethod'
    )
    ModelVersion_1: Optional[ModelVersion] = Field(None, alias='ModelVersion')
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')
    Status: Optional[ModelPackagingJobStatus] = None
    StatusMessage: Optional[ModelPackagingStatusMessage] = None


class ModelPackagingJobsList(RootModel[List[ModelPackagingJobMetadata]]):
    root: List[ModelPackagingJobMetadata]


class OutputConfig(BaseModel):
    S3Location_1: S3Location = Field(..., alias='S3Location')


class OutputS3Object(BaseModel):
    Bucket: S3BucketName
    Key: S3ObjectKey


class ProjectDescription(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    Datasets: Optional[DatasetMetadataList] = None
    ProjectArn_1: Optional[ProjectArn] = Field(None, alias='ProjectArn')
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')


class ProjectMetadata(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    ProjectArn_1: Optional[ProjectArn] = Field(None, alias='ProjectArn')
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')


class ProjectMetadataList(RootModel[List[ProjectMetadata]]):
    root: List[ProjectMetadata]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    Tags: TagList


class TargetPlatform(BaseModel):
    Accelerator: Optional[TargetPlatformAccelerator] = None
    Arch: TargetPlatformArch
    Os: TargetPlatformOs


class Field20201120ProjectsProjectNameModelsPostRequest(BaseModel):
    Description: Optional[
        constr(pattern=r'[0-9A-Za-z\.\-_]*', min_length=1, max_length=500)
    ] = Field(None, description='A description for the version of the model.')
    KmsKeyId: Optional[
        constr(
            pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
            min_length=1,
            max_length=2048,
        )
    ] = Field(
        None,
        description='The identifier for your AWS KMS key. The key is used to encrypt training and test images copied into the service for model training. Your source images are unaffected. If this parameter is not specified, the copied images are encrypted by a key that AWS owns and manages.',
    )
    OutputConfig: OutputConfig1 = Field(
        ...,
        description='The S3 location where Amazon Lookout for Vision saves model training files.',
    )
    Tags: Optional[List[Tag]] = Field(
        None,
        description='A set of tags (key-value pairs) that you want to attach to the model.',
        max_length=200,
        min_length=0,
    )


class Field20201120TagsResourceArnPostRequest(BaseModel):
    Tags: List[Tag] = Field(
        ...,
        description='The key-value tags to assign to the model.',
        max_length=200,
        min_length=0,
    )


class CreateDatasetResponse(BaseModel):
    DatasetMetadata_1: Optional[DatasetMetadata] = Field(None, alias='DatasetMetadata')


class CreateModelRequest(BaseModel):
    Description: Optional[ModelDescriptionMessage] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    OutputConfig_1: OutputConfig = Field(..., alias='OutputConfig')
    Tags: Optional[TagList] = None


class CreateModelResponse(BaseModel):
    ModelMetadata_1: Optional[ModelMetadata] = Field(None, alias='ModelMetadata')


class CreateProjectResponse(BaseModel):
    ProjectMetadata_1: Optional[ProjectMetadata] = Field(None, alias='ProjectMetadata')


class DatasetDescription(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    DatasetType_1: Optional[DatasetType] = Field(None, alias='DatasetType')
    ImageStats: Optional[DatasetImageStats] = None
    LastUpdatedTimestamp: Optional[DateTime] = None
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')
    Status: Optional[DatasetStatus] = None
    StatusMessage: Optional[DatasetStatusMessage] = None


class DatasetGroundTruthManifest(BaseModel):
    S3Object: Optional[InputS3Object] = None


class DatasetSource(BaseModel):
    GroundTruthManifest: Optional[DatasetGroundTruthManifest] = None


class DescribeDatasetResponse(BaseModel):
    DatasetDescription_1: Optional[DatasetDescription] = Field(
        None, alias='DatasetDescription'
    )


class DescribeProjectResponse(BaseModel):
    ProjectDescription_1: Optional[ProjectDescription] = Field(
        None, alias='ProjectDescription'
    )


class DetectAnomalyResult(BaseModel):
    Anomalies: Optional[AnomalyList] = None
    AnomalyMask_1: Optional[AnomalyMask] = Field(None, alias='AnomalyMask')
    Confidence: Optional[Float] = None
    IsAnomalous: Optional[Boolean] = None
    Source: Optional[ImageSource] = None


class GreengrassConfiguration(BaseModel):
    CompilerOptions_1: Optional[CompilerOptions] = Field(None, alias='CompilerOptions')
    ComponentDescription_1: Optional[ComponentDescription] = Field(
        None, alias='ComponentDescription'
    )
    ComponentName_1: ComponentName = Field(..., alias='ComponentName')
    ComponentVersion_1: Optional[ComponentVersion] = Field(
        None, alias='ComponentVersion'
    )
    S3OutputLocation: S3Location
    Tags: Optional[TagList] = None
    TargetDevice_1: Optional[TargetDevice] = Field(None, alias='TargetDevice')
    TargetPlatform_1: Optional[TargetPlatform] = Field(None, alias='TargetPlatform')


class ListModelPackagingJobsResponse(BaseModel):
    ModelPackagingJobs: Optional[ModelPackagingJobsList] = None
    NextToken: Optional[PaginationToken] = None


class ListModelsResponse(BaseModel):
    Models: Optional[ModelMetadataList] = None
    NextToken: Optional[PaginationToken] = None


class ListProjectsResponse(BaseModel):
    NextToken: Optional[PaginationToken] = None
    Projects: Optional[ProjectMetadataList] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class ModelDescription(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    Description: Optional[ModelDescriptionMessage] = None
    EvaluationEndTimestamp: Optional[DateTime] = None
    EvaluationManifest: Optional[OutputS3Object] = None
    EvaluationResult: Optional[OutputS3Object] = None
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')
    MaxInferenceUnits: Optional[InferenceUnits] = None
    MinInferenceUnits: Optional[InferenceUnits] = None
    ModelArn_1: Optional[ModelArn] = Field(None, alias='ModelArn')
    ModelVersion_1: Optional[ModelVersion] = Field(None, alias='ModelVersion')
    OutputConfig_1: Optional[OutputConfig] = Field(None, alias='OutputConfig')
    Performance: Optional[ModelPerformance] = None
    Status: Optional[ModelStatus] = None
    StatusMessage: Optional[ModelStatusMessage] = None


class ModelPackagingConfiguration(BaseModel):
    Greengrass: GreengrassConfiguration


class ModelPackagingDescription(BaseModel):
    CreationTimestamp: Optional[DateTime] = None
    JobName: Optional[ModelPackagingJobName] = None
    LastUpdatedTimestamp: Optional[DateTime] = None
    ModelPackagingConfiguration_1: Optional[ModelPackagingConfiguration] = Field(
        None, alias='ModelPackagingConfiguration'
    )
    ModelPackagingJobDescription_1: Optional[ModelPackagingJobDescription] = Field(
        None, alias='ModelPackagingJobDescription'
    )
    ModelPackagingMethod_1: Optional[ModelPackagingMethod] = Field(
        None, alias='ModelPackagingMethod'
    )
    ModelPackagingOutputDetails_1: Optional[ModelPackagingOutputDetails] = Field(
        None, alias='ModelPackagingOutputDetails'
    )
    ModelVersion_1: Optional[ModelVersion] = Field(None, alias='ModelVersion')
    ProjectName_1: Optional[ProjectName] = Field(None, alias='ProjectName')
    Status: Optional[ModelPackagingJobStatus] = None
    StatusMessage: Optional[ModelPackagingStatusMessage] = None


class StartModelPackagingJobRequest(BaseModel):
    Configuration: ModelPackagingConfiguration
    Description: Optional[ModelPackagingJobDescription] = None
    JobName: Optional[ModelPackagingJobName] = None
    ModelVersion_1: ModelVersion = Field(..., alias='ModelVersion')


class Field20201120ProjectsProjectNameDatasetsPostRequest(BaseModel):
    DatasetSource_1: Optional[DatasetSource] = Field(
        None,
        alias='DatasetSource',
        description='Information about the location of a manifest file that Amazon Lookout for Vision uses to to create a dataset.',
    )
    DatasetType: constr(pattern=r'train|test', min_length=1, max_length=10) = Field(
        ...,
        description='The type of the dataset. Specify <code>train</code> for a training dataset. Specify <code>test</code> for a test dataset.',
    )


class Configuration(BaseModel):
    Greengrass: Optional[GreengrassConfiguration] = None


class Field20201120ProjectsProjectNameModelpackagingjobsPostRequest(BaseModel):
    Configuration_1: Configuration = Field(
        ...,
        alias='Configuration',
        description=' Configuration information for a Amazon Lookout for Vision model packaging job. For more information, see <a>StartModelPackagingJob</a>. ',
    )
    Description: Optional[
        constr(pattern=r'[a-zA-Z0-9-_. ()\':,;?]+', min_length=1, max_length=256)
    ] = Field(None, description='A description for the model packaging job. ')
    JobName: Optional[constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=64)] = (
        Field(
            None,
            description="A name for the model packaging job. If you don't supply a value, the service creates a job name for you. ",
        )
    )
    ModelVersion: constr(
        pattern=r'([1-9][0-9]*|latest)', min_length=1, max_length=10
    ) = Field(
        ...,
        description=' The version of the model within the project that you want to package. ',
    )


class CreateDatasetRequest(BaseModel):
    DatasetSource_1: Optional[DatasetSource] = Field(None, alias='DatasetSource')
    DatasetType_1: DatasetType = Field(..., alias='DatasetType')


class DescribeModelPackagingJobResponse(BaseModel):
    ModelPackagingDescription_1: Optional[ModelPackagingDescription] = Field(
        None, alias='ModelPackagingDescription'
    )


class DescribeModelResponse(BaseModel):
    ModelDescription_1: Optional[ModelDescription] = Field(
        None, alias='ModelDescription'
    )


class DetectAnomaliesResponse(BaseModel):
    DetectAnomalyResult_1: Optional[DetectAnomalyResult] = Field(
        None, alias='DetectAnomalyResult'
    )
